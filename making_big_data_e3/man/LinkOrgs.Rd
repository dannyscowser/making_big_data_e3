% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LinkOrgsMain.R
\name{LinkOrgs}
\alias{LinkOrgs}
\title{LinkOrgs}
\usage{
LinkOrgs(x, y, by ...)
}
\arguments{
\item{x, y}{data frames to be merged}

\item{by, by.x, by.y}{character vector(s) that specify the column names used for merging data frames \code{x} and \code{y}. The merging variables should be organizational names. See \code{?base::merge} for more details regarding syntax.}

\item{algorithm}{character; specifies which algorithm described in Libgober and Jerzak (2023+) should be used. Options are "\code{markov}", "\code{bipartite}", and "\code{ml}". Default is "\code{ml}", which uses a machine learning approach to predicting the match probability.}

\item{conda_env}{character string; specifies a conda environment where tensorflow and related packages have been installed. Used only when \code{algorithm='ml'} or \code{DistanceMeasure='ml'}.}

\item{ReturnDiagnostics}{logical; specifies whether various match-level diagnostics should be returned in the merged data frame.}

\item{...}{For additional specification options, see
``Details''.}
}
\value{
\code{z} The merged data frame.
}
\description{
Implements the organizational record linkage algorithms of Libgober and Jerzak (2023+).
}
\details{
\code{LinkOrgs} automatically processes the name text for each dataset (specified by \code{by} or \code{by.x}, and \code{by.y}. Users may specify the following options:
\itemize{
\item Set \code{DistanceMeasure} to control algorithm for computing pairwise string distances. Options include "\code{osa}", "\code{jaccard}", "\code{jw}". See \code{?stringdist::stringdist} for all options. Default is \code{"jaccard"}. To use the combined machine learning and network  methods, set \code{algorithm} to \code{"bipartite"} or \code{"markov"}, and \code{DistanceMeasure} to \code{"ml"}.
\item Set \code{MaxDist} to control the maximum allowed distance between two matched strings
\item Set \code{MaxDist_network} to control the maximum allowed distance between two matched strings in the integration with the LinkedIn network representation.
\item Set \code{AveMatchNumberPerAlias} to control the maximum allowed distance between two matched strings. Takes priority over \code{MaxDist} if both specified.
\item Set \code{AveMatchNumberPerAlias_network} to control the maximum allowed distance between two matched strings in the integration with the LinkedIn network representation. Takes priority over \code{MaxDist_network} if both specified.
\item Set \code{qgram} to control the character-level q-grams used in the distance measure. Default is \code{2}.
\item Set \code{RemoveCommonWords} to \code{TRUE} to remove common words (those appearing in >
10\% of aliases). Default is \code{FALSE}.
\item Set \code{NormalizeSpaces} to \code{TRUE} to remove hanging whitespaces. Default is \code{TRUE}.
\item Set \code{RemovePunctuation} to \code{TRUE} to remove punctuation. Default is \code{TRUE}.
\item Set \code{ToLower} to \code{TRUE} to ignore case. Default is \code{TRUE}.
}
}
\examples{

#Create synthetic data
x_orgnames <- c("apple","oracle","enron inc.","mcdonalds corporation")
y_orgnames <- c("apple corp","oracle inc","enron","mcdonalds co")
x <- data.frame("orgnames_x"=x_orgnames)
y <- data.frame("orgnames_y"=y_orgnames)

# Perform merge
linkedOrgs <- LinkOrgs(x = x,
                       y = y,
                       by.x = "orgnames_x",
                       by.y = "orgnames_y",
                       MaxDist = 0.6)

print( linkedOrgs )

}
